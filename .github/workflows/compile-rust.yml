# action.yml
on: [push]
name: 'Build Rust'
runs:
  using: 'docker'
  image: 'Dockerfile'





# name: Rust for Dust

# on: [push]

# jobs:
#   build_and_save:
#     runs-on: ubuntu-18.04     # ubuntu-latest  is same with  # ubuntu-20.04   
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#       - name: rustc build 
#         run: |
#           cp config.toml.verify config.toml
#           python x.py dist

#       - name: Archive production artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: dist-without-markdown
#           path: |
#             dist
#             !dist/**/*.md        

      # - name: Archive code coverage results
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: code-coverage-report
      #     path: output/test/code-coverage.html

# name: Compile Rust for Dust
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - run: echo "🍏 This job's status is ${{ job.status }}."


# jobs:
#   example-job:
#     name: Save output
#     steps:
#       - shell: bash
#         run: |
#           expr 1 + 1 > output.log
#       - name: Upload output file
#         uses: actions/upload-artifact@v2
#         with:
#           name: output-log-file
#           path: output.log




